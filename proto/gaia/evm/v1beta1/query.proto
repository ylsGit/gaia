syntax = "proto3";
package gaia.evm.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "gaia/evm/v1beta1/evm.proto";

option go_package = "github.com/cosmos/gaia/x/evm/types";

// Query defines the gRPC querier service for evm module
service Query {
  // Balance queries the balance of all coins for a single account.
  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse) {
    option (google.api.http).get = "/cosmos/evm/v1beta1/balances/{address}";
  }
  // Code queries the storage for a contract account.
  rpc Storage(QueryStorageRequest) returns (QueryStorageResponse) {
    option (google.api.http).get =
        "/cosmos/evm/v1beta1/storage/{address}/{key}";
  }
  // Code queries the code for a contract account.
  rpc Code(QueryCodeRequest) returns (QueryCodeResponse) {
    option (google.api.http).get = "/cosmos/evm/v1beta1/code/{address}";
  }
  //
  //    rpc BlockNumber(QueryBlockNumberRequest) returns (QueryParamsResponse) {
  //        option (google.api.http).get =
  //        "/cosmos/evm/v1beta1/blocks/number/latest";
  //    }
  // HashToHeight queries the block height by a block hash.
  rpc HashToHeight(QueryHeightRequest) returns (QueryHeightResponse) {
    option (google.api.http).get = "/cosmos/evm/v1beta1/blocks/number/{hash}";
  }
  // HeightToHash queries the block hash by a block height.
  rpc HeightToHash(QueryHashRequest) returns (QueryHashResponse) {
    option (google.api.http).get = "/cosmos/evm/v1beta1/blocks/hash/{height}";
  }
  // BlockBloom queries the block bloom filter bytes at a given height.
  rpc BlockBloom(QueryBlockBloomRequest) returns (QueryBlockBloomResponse) {
    option (google.api.http).get = "/cosmos/evm/v1beta1/bloom/{height}";
  }
  // Account queries an Ethereum account.
  rpc Account(QueryAccountRequest) returns (QueryAccountResponse) {
    option (google.api.http).get = "/cosmos/evm/v1beta1/account/{address}";
  }
  //    //
  //    rpc ExportAccount(QueryParamsRequest) returns (QueryParamsResponse) {
  //        option (google.api.http).get =
  //        "/cosmos/evm/v1beta1/account/export/{address}";
  //    }
  // Params queries the parameters of x/evm module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmos/evm/v1beta1/params";
  }
  // Section queries the parameters of x/evm module.
  //    rpc Section(QueryParamsRequest) returns (QueryParamsResponse) {
  //        option (google.api.http).get = "/cosmos/evm/v1beta1/section";
  //    }
  //    // ContractDeploymentWhitelist queries the parameters of x/evm module.
  //    rpc ContractDeploymentWhitelist(QueryParamsRequest) returns
  //    (QueryParamsResponse) {
  //        option (google.api.http).get =
  //        "/cosmos/evm/v1beta1/contract/whitelist";
  //    }
  //    // ContractBlockedList queries the parameters of x/evm module.
  //    rpc ContractBlockedList(QueryParamsRequest) returns
  //    (QueryParamsResponse) {
  //        option (google.api.http).get =
  //        "/cosmos/evm/v1beta1/contract/blacklist";
  //    }
}

// QueryBalanceRequest
message QueryBalanceRequest {
  // address is the address to query balances for.
  string address = 1;
}

// QueryBalanceResponse
message QueryBalanceResponse {
  // balance
  string balance = 1;
}

// QueryStorageRequest
message QueryStorageRequest {
  // address is the contract address to query storage for.
  string address = 1;
  // key
  string key = 2;
}

// QueryStorageResponse
message QueryStorageResponse {
  // value
  bytes value = 1;
}

// QueryCodeRequest
message QueryCodeRequest {
  // address is the contract address to query code for.
  string address = 1;
}

// QueryCodeResponse
message QueryCodeResponse {
  // code
  bytes code = 1;
}

// QueryBlockNumberRequest
message QueryBlockNumberRequest {}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryBlockBloomRequest is the request type for the Query/BlockBloom RPC
// method.
message QueryBlockBloomRequest { sint64 height = 1; }

// QueryBlockBloomResponse is the response type for the Query/BlockBloom RPC
// method.
message QueryBlockBloomResponse {
  // bloom represents bloom filter for the given block hash.
  bytes bloom = 1;
}

message QueryHeightRequest { bytes hash = 1; }

message QueryHeightResponse { sint64 height = 1; }

message QueryHashRequest { sint64 height = 1; }

message QueryHashResponse { bytes hash = 1; }

// QueryAccountRequest is the request type for the Query/Account RPC method.
message QueryAccountRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // address is the ethereum hex address to query the account for.
  string address = 1;
}

// QueryAccountResponse is the response type for the Query/Account RPC method.
message QueryAccountResponse {
  // balance is the balance of the EVM denomination.
  string balance = 1;
  // code_hash is the code bytes from the EOA.
  bytes code_hash = 2;
  // nonce is the account's sequence number.
  uint64 nonce = 3;
}
