// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gaia/evm/v1beta1/evm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the evm module.
type Params struct {
	EnableCreate                      bool   `protobuf:"varint,1,opt,name=enable_create,json=enableCreate,proto3" json:"enable_create,omitempty" yaml:"enable_create,omitempty"`
	EnableCall                        bool   `protobuf:"varint,2,opt,name=enable_call,json=enableCall,proto3" json:"enable_call,omitempty" yaml:"enable_call,omitempty"`
	ExtraEIPs                         []int  `protobuf:"varint,3,rep,packed,name=extra_eips,json=extraEips,proto3,customtype=int" json:"extra_eips,omitempty" yaml:"extra_eips,omitempty"`
	EnableContractDeploymentWhitelist bool   `protobuf:"varint,4,opt,name=enable_contract_deployment_whitelist,json=enableContractDeploymentWhitelist,proto3" json:"enable_contract_deployment_whitelist,omitempty" yaml:"enable_contract_deployment_whitelist"`
	EnableContractBlockedList         bool   `protobuf:"varint,5,opt,name=enable_contract_blocked_list,json=enableContractBlockedList,proto3" json:"enable_contract_blocked_list,omitempty" yaml:"enable_contract_blocked_list"`
	MaxGasLimitPerTx                  uint64 `protobuf:"varint,6,opt,name=max_gas_limit_per_tx,json=maxGasLimitPerTx,proto3" json:"max_gas_limit_per_tx,omitempty" yaml:"max_gas_limit_per_tx"`
	// evm_denom represents the token denomination used to run the EVM state
	// transitions.
	EvmDenom string `protobuf:"bytes,7,opt,name=evm_denom,json=evmDenom,proto3" json:"evm_denom,omitempty" yaml:"evm_denom"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19cc4d16a556dd0, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnableCreate() bool {
	if m != nil {
		return m.EnableCreate
	}
	return false
}

func (m *Params) GetEnableCall() bool {
	if m != nil {
		return m.EnableCall
	}
	return false
}

func (m *Params) GetEnableContractDeploymentWhitelist() bool {
	if m != nil {
		return m.EnableContractDeploymentWhitelist
	}
	return false
}

func (m *Params) GetEnableContractBlockedList() bool {
	if m != nil {
		return m.EnableContractBlockedList
	}
	return false
}

func (m *Params) GetMaxGasLimitPerTx() uint64 {
	if m != nil {
		return m.MaxGasLimitPerTx
	}
	return 0
}

func (m *Params) GetEvmDenom() string {
	if m != nil {
		return m.EvmDenom
	}
	return ""
}

// ChainConfig defines the Ethereum ChainConfig parameters using sdk.Int values instead of big.Int.
//
// NOTE 1: Since empty/uninitialized Ints (i.e with a nil big.Int value) are parsed to zero, we need to manually
// specify that negative Int values will be considered as nil. See getBlockValue for reference.
//
// NOTE 2: This type is not a configurable Param since the SDK does not allow for validation against
// a previous stored parameter values or the current block height (retrieved from context). If you
// want to update the config values, use an software upgrade procedure.
type ChainConfig struct {
	// Homestead switch block (< 0 no fork, 0 = already homestead)
	HomesteadBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=homestead_block,json=homesteadBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"homestead_block" yaml:"homestead_block"`
	// TheDAO hard-fork switch block (< 0 no fork)
	DAOForkBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=dao_fork_block,json=daoForkBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"dao_fork_block" yaml:"dao_fork_block"`
	// Whether the nodes supports or opposes the DAO hard-fork
	DAOForkSupport bool `protobuf:"varint,3,opt,name=dao_fork_support,json=daoForkSupport,proto3" json:"dao_fork_support,omitempty" yaml:"dao_fork_support"`
	// EIP150 implements the Gas price changes
	// (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (< 0 no fork)
	EIP150Block github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=eip150_block,json=eip150Block,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"eip150_block" yaml:"eip150_block"`
	// EIP150 HF hash (needed for header only clients as only gas pricing changed)
	EIP150Hash string `protobuf:"bytes,5,opt,name=eip150_hash,json=eip150Hash,proto3" json:"eip150_hash,omitempty" yaml:"eip150_hash"`
	// EIP155Block HF block
	EIP155Block github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=eip155_block,json=eip155Block,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"eip155_block" yaml:"eip155_block"`
	// EIP158 HF block
	EIP158Block github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=eip158_block,json=eip158Block,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"eip158_block" yaml:"eip158_block"`
	// Byzantium switch block (< 0 no fork, 0 = already on byzantium)
	ByzantiumBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=byzantium_block,json=byzantiumBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"byzantium_block" yaml:"byzantium_block"`
	// Constantinople switch block (< 0 no fork, 0 = already activated)
	ConstantinopleBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=constantinople_block,json=constantinopleBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"constantinople_block" yaml:"constantinople_block"`
	// Petersburg switch block (< 0 same as Constantinople)
	PetersburgBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=petersburg_block,json=petersburgBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"petersburg_block" yaml:"petersburg_block,omitempty"`
	// Istanbul switch block (< 0 no fork, 0 = already on istanbul)
	IstanbulBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=istanbul_block,json=istanbulBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"istanbul_block" yaml:"istanbul_block"`
	// Eip-2384 (bomb delay) switch block (< 0 no fork, 0 = already activated)
	MuirGlacierBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=muir_glacier_block,json=muirGlacierBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"muir_glacier_block" yaml:"muir_glacier_block"`
	// YOLO v2: https://github.com/ethereum/EIPs/pull/2657 (Ephemeral testnet)
	YoloV2Block github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=yolo_v2_block,json=yoloV2Block,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"yolo_v2_block" yaml:"yolo_v2_block"`
	// EWASM switch block (< 0 no fork, 0 = already activated)
	EWASMBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,14,opt,name=ewasm_block,json=ewasmBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ewasm_block" yaml:"ewasm_block"`
}

func (m *ChainConfig) Reset()         { *m = ChainConfig{} }
func (m *ChainConfig) String() string { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()    {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19cc4d16a556dd0, []int{1}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

func (m *ChainConfig) GetDAOForkSupport() bool {
	if m != nil {
		return m.DAOForkSupport
	}
	return false
}

func (m *ChainConfig) GetEIP150Hash() string {
	if m != nil {
		return m.EIP150Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "gaia.evm.v1beta1.Params")
	proto.RegisterType((*ChainConfig)(nil), "gaia.evm.v1beta1.ChainConfig")
}

func init() { proto.RegisterFile("gaia/evm/v1beta1/evm.proto", fileDescriptor_c19cc4d16a556dd0) }

var fileDescriptor_c19cc4d16a556dd0 = []byte{
	// 948 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0x4f, 0x6f, 0x1a, 0x47,
	0x18, 0xc6, 0x21, 0x26, 0x8e, 0x19, 0x30, 0x41, 0x1b, 0xda, 0x62, 0x37, 0x62, 0xc8, 0x34, 0x6a,
	0x2d, 0xb5, 0x31, 0x21, 0x11, 0x92, 0x15, 0xf5, 0x62, 0x6c, 0xe2, 0x58, 0x4d, 0x14, 0x6b, 0x1d,
	0xd5, 0x52, 0x2f, 0xab, 0x01, 0x26, 0x30, 0xf5, 0xee, 0xce, 0x76, 0x67, 0xc0, 0x50, 0xa9, 0x55,
	0x3e, 0x42, 0x8f, 0x3d, 0xf6, 0xe3, 0xe4, 0xd0, 0x43, 0x8e, 0x55, 0x0e, 0xdb, 0x0a, 0x7f, 0x83,
	0xfd, 0x04, 0xd5, 0xfc, 0x01, 0xb3, 0x18, 0x45, 0x42, 0x3e, 0xb1, 0xef, 0xfb, 0x3c, 0x3c, 0xbf,
	0x77, 0x60, 0x66, 0xb4, 0x60, 0xbb, 0x87, 0x29, 0xae, 0x91, 0xa1, 0x57, 0x1b, 0xd6, 0xdb, 0x44,
	0xe0, 0xba, 0x7c, 0xde, 0x0d, 0x42, 0x26, 0x98, 0x55, 0x94, 0xda, 0xae, 0xac, 0x8d, 0xb6, 0x5d,
	0xea, 0xb1, 0x1e, 0x53, 0x62, 0x4d, 0x3e, 0x69, 0xdf, 0xf6, 0x56, 0x87, 0x71, 0x8f, 0x71, 0x47,
	0x0b, 0xba, 0x30, 0x52, 0x45, 0x57, 0xb5, 0x36, 0xe6, 0x64, 0x46, 0xe8, 0x30, 0xea, 0x6b, 0x1d,
	0xfd, 0x9b, 0x01, 0xeb, 0x27, 0x38, 0xc4, 0x1e, 0xb7, 0x8e, 0xc0, 0x26, 0xf1, 0x71, 0xdb, 0x25,
	0x4e, 0x27, 0x24, 0x58, 0x90, 0x72, 0xba, 0x9a, 0xde, 0xd9, 0x68, 0xa2, 0x38, 0x82, 0x95, 0x31,
	0xf6, 0xdc, 0x67, 0x28, 0x21, 0x7f, 0xc7, 0x3c, 0x2a, 0x88, 0x17, 0x88, 0x31, 0xb2, 0xf3, 0x5a,
	0x39, 0x50, 0x82, 0xb5, 0x0f, 0x72, 0x53, 0x27, 0x76, 0xdd, 0xf2, 0x2d, 0x15, 0x53, 0x8d, 0x23,
	0x78, 0x3f, 0x19, 0x83, 0x5d, 0x77, 0x3e, 0x04, 0x98, 0x10, 0xec, 0xba, 0x96, 0x0d, 0x00, 0x19,
	0x89, 0x10, 0x3b, 0x84, 0x06, 0xbc, 0xbc, 0x56, 0x5d, 0xdb, 0xb9, 0xdd, 0x7c, 0xfa, 0x31, 0x82,
	0x6b, 0xd4, 0x17, 0x93, 0x08, 0x66, 0x5b, 0x52, 0x6c, 0x1d, 0x9f, 0xf0, 0x38, 0x82, 0x5f, 0x9a,
	0xd4, 0x99, 0x7f, 0x3e, 0x34, 0xab, 0xda, 0x2d, 0x1a, 0x70, 0xeb, 0x5d, 0x1a, 0x3c, 0x9c, 0xa2,
	0x99, 0x2f, 0x42, 0xdc, 0x11, 0x4e, 0x97, 0x04, 0x2e, 0x1b, 0x7b, 0xc4, 0x17, 0xce, 0x45, 0x9f,
	0x0a, 0xe2, 0x52, 0x2e, 0xca, 0x19, 0x35, 0x70, 0x2d, 0x8e, 0xe0, 0xb7, 0xc9, 0x81, 0x3f, 0xf5,
	0x2d, 0x64, 0x3f, 0x30, 0xf3, 0x1b, 0xd7, 0xe1, 0xcc, 0x74, 0x36, 0xf5, 0x58, 0x7d, 0x70, 0x7f,
	0x31, 0xab, 0xed, 0xb2, 0xce, 0x39, 0xe9, 0x3a, 0x8a, 0x7c, 0x5b, 0x91, 0xbf, 0x89, 0x23, 0xf8,
	0xd5, 0x72, 0xf2, 0xbc, 0x1b, 0xd9, 0x5b, 0x49, 0x62, 0x53, 0x8b, 0x2f, 0x25, 0xe9, 0x35, 0x28,
	0x79, 0x78, 0xe4, 0xf4, 0x30, 0x77, 0x5c, 0xea, 0x51, 0xe1, 0x04, 0x24, 0x74, 0xc4, 0xa8, 0xbc,
	0x5e, 0x4d, 0xef, 0x64, 0x9a, 0xf0, 0xea, 0x67, 0x5b, 0xe6, 0x42, 0x76, 0xd1, 0xc3, 0xa3, 0x23,
	0xcc, 0x5f, 0xca, 0xe6, 0x09, 0x09, 0xdf, 0x8c, 0xac, 0x3a, 0xc8, 0x92, 0xa1, 0xe7, 0x74, 0x89,
	0xcf, 0xbc, 0xf2, 0x9d, 0x6a, 0x7a, 0x27, 0xdb, 0x2c, 0xc5, 0x11, 0x2c, 0x9a, 0x39, 0xa7, 0x12,
	0xb2, 0x37, 0xc8, 0xd0, 0x3b, 0x94, 0x8f, 0xcf, 0x32, 0x7f, 0xfe, 0x05, 0x53, 0xe8, 0xef, 0x3c,
	0xc8, 0x1d, 0xf4, 0x31, 0xf5, 0x0f, 0x98, 0xff, 0x96, 0xf6, 0xac, 0x5f, 0xc0, 0xdd, 0x3e, 0xf3,
	0x08, 0x17, 0x04, 0x77, 0xf5, 0x7a, 0xd4, 0x46, 0xcb, 0x36, 0x5f, 0xbc, 0x8f, 0x60, 0xea, 0x63,
	0x04, 0xbf, 0xee, 0x51, 0xd1, 0x1f, 0xb4, 0x77, 0x3b, 0xcc, 0x33, 0x7b, 0xd9, 0x7c, 0x3c, 0xe2,
	0xdd, 0xf3, 0x9a, 0x18, 0x07, 0x84, 0xef, 0x1e, 0xfb, 0x22, 0x8e, 0xe0, 0xe7, 0x1a, 0xbe, 0x10,
	0x87, 0xec, 0xc2, 0xac, 0xa3, 0x7e, 0x12, 0xeb, 0x37, 0x50, 0xe8, 0x62, 0xe6, 0xbc, 0x65, 0xe1,
	0xb9, 0x21, 0xde, 0x52, 0xc4, 0xb3, 0xd5, 0x88, 0x93, 0x08, 0xe6, 0x0f, 0xf7, 0x5f, 0x3f, 0x67,
	0xe1, 0xb9, 0xca, 0x8d, 0x23, 0xf8, 0x99, 0x9e, 0x20, 0x99, 0x8e, 0xec, 0x7c, 0x17, 0xb3, 0x99,
	0xcd, 0x3a, 0x03, 0xc5, 0x99, 0x81, 0x0f, 0x82, 0x80, 0x85, 0xa2, 0xbc, 0xa6, 0xfe, 0xe9, 0x47,
	0x93, 0x08, 0x16, 0x4c, 0xe4, 0xa9, 0x56, 0xe2, 0x08, 0x7e, 0xb1, 0x10, 0x6a, 0xbe, 0x83, 0xec,
	0x82, 0x89, 0x35, 0x56, 0xeb, 0x02, 0xe4, 0x09, 0x0d, 0xea, 0x8d, 0xc7, 0x66, 0x55, 0x19, 0xb5,
	0xaa, 0x37, 0x2b, 0xaf, 0x2a, 0xd7, 0x3a, 0x3e, 0xa9, 0x37, 0x1e, 0x4f, 0x17, 0x75, 0xcf, 0xfc,
	0xa7, 0x73, 0xd1, 0xc8, 0xce, 0xe9, 0x52, 0xaf, 0xa8, 0x05, 0x4c, 0xe9, 0xf4, 0x31, 0xef, 0xab,
	0x6d, 0x9b, 0x6d, 0x3e, 0x9c, 0x44, 0x10, 0xe8, 0xa4, 0x17, 0x98, 0xf7, 0xe3, 0x08, 0x5a, 0x89,
	0x20, 0x69, 0x95, 0xa7, 0x5c, 0x55, 0xd2, 0x31, 0x9b, 0xbf, 0x61, 0xe6, 0x5f, 0xbf, 0xd1, 0xfc,
	0x8d, 0x65, 0xf3, 0x37, 0x92, 0xf3, 0x6b, 0xcf, 0x0c, 0xbc, 0x67, 0xc0, 0x77, 0x6e, 0x04, 0xde,
	0x5b, 0x06, 0xde, 0x4b, 0x82, 0xb5, 0x47, 0x6e, 0xfe, 0xf6, 0xf8, 0x57, 0xec, 0x0b, 0x3a, 0xf0,
	0x0c, 0x7b, 0xe3, 0x66, 0x9b, 0x7f, 0x21, 0x0e, 0xd9, 0x85, 0x59, 0x47, 0x23, 0xdf, 0xa5, 0x41,
	0xa9, 0xc3, 0x7c, 0x2e, 0x64, 0xd3, 0x67, 0x81, 0x4b, 0x0c, 0x38, 0xab, 0xc0, 0xaf, 0x56, 0x06,
	0x9b, 0x8b, 0x63, 0x59, 0x26, 0xb2, 0xef, 0x25, 0xdb, 0x7a, 0x84, 0xdf, 0x41, 0x31, 0x20, 0x82,
	0x84, 0xbc, 0x3d, 0x08, 0x7b, 0x86, 0x0e, 0x14, 0xfd, 0x74, 0x65, 0xfa, 0x03, 0x4d, 0x5f, 0xcc,
	0x9b, 0xbf, 0xf3, 0xef, 0x5e, 0x89, 0x9a, 0xef, 0x83, 0x02, 0x95, 0x43, 0xb5, 0x07, 0xae, 0xa1,
	0xe7, 0x14, 0xfd, 0x68, 0x65, 0xba, 0x39, 0xef, 0xc9, 0x34, 0x64, 0x6f, 0x4e, 0x1b, 0x9a, 0x37,
	0x06, 0x96, 0x37, 0xa0, 0xa1, 0xd3, 0x73, 0x71, 0x87, 0x92, 0xd0, 0x30, 0xf3, 0x8a, 0xf9, 0xc3,
	0xca, 0xcc, 0x2d, 0x73, 0x51, 0x5f, 0x4b, 0x94, 0xd7, 0xf4, 0x80, 0x86, 0x47, 0xba, 0xa7, 0xd1,
	0x3f, 0x83, 0xcd, 0x31, 0x73, 0x99, 0x33, 0x7c, 0x62, 0xa8, 0x9b, 0x8a, 0xfa, 0x7c, 0x65, 0x6a,
	0x49, 0x53, 0x13, 0x61, 0xc8, 0xce, 0xc9, 0xfa, 0xc7, 0x27, 0x9a, 0xc5, 0x41, 0x8e, 0x5c, 0x60,
	0x3e, 0xdd, 0xc8, 0x05, 0x45, 0xb2, 0x57, 0x3e, 0x44, 0xa0, 0x75, 0xb6, 0x7f, 0xfa, 0x6a, 0x7a,
	0x86, 0xa6, 0x77, 0xc6, 0x55, 0xb0, 0xbc, 0x33, 0x64, 0xa5, 0x1c, 0xcd, 0xef, 0xdf, 0x4f, 0x2a,
	0xe9, 0x0f, 0x93, 0x4a, 0xfa, 0xbf, 0x49, 0x25, 0xfd, 0xc7, 0x65, 0x25, 0xf5, 0xe1, 0xb2, 0x92,
	0xfa, 0xe7, 0xb2, 0x92, 0xfa, 0x09, 0x5d, 0x27, 0xaa, 0x77, 0xab, 0x91, 0x7a, 0xbb, 0x52, 0xc4,
	0xf6, 0xba, 0x7a, 0xeb, 0x79, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x4d, 0x64, 0xde,
	0x76, 0x09, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmDenom) > 0 {
		i -= len(m.EvmDenom)
		copy(dAtA[i:], m.EvmDenom)
		i = encodeVarintEvm(dAtA, i, uint64(len(m.EvmDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxGasLimitPerTx != 0 {
		i = encodeVarintEvm(dAtA, i, uint64(m.MaxGasLimitPerTx))
		i--
		dAtA[i] = 0x30
	}
	if m.EnableContractBlockedList {
		i--
		if m.EnableContractBlockedList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EnableContractDeploymentWhitelist {
		i--
		if m.EnableContractDeploymentWhitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExtraEIPs) > 0 {
		dAtA2 := make([]byte, len(m.ExtraEIPs)*10)
		var j1 int
		for _, num1 := range m.ExtraEIPs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvm(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.EnableCall {
		i--
		if m.EnableCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EnableCreate {
		i--
		if m.EnableCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EWASMBlock.Size()
		i -= size
		if _, err := m.EWASMBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.YoloV2Block.Size()
		i -= size
		if _, err := m.YoloV2Block.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.MuirGlacierBlock.Size()
		i -= size
		if _, err := m.MuirGlacierBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.IstanbulBlock.Size()
		i -= size
		if _, err := m.IstanbulBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.PetersburgBlock.Size()
		i -= size
		if _, err := m.PetersburgBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.ConstantinopleBlock.Size()
		i -= size
		if _, err := m.ConstantinopleBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ByzantiumBlock.Size()
		i -= size
		if _, err := m.ByzantiumBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.EIP158Block.Size()
		i -= size
		if _, err := m.EIP158Block.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.EIP155Block.Size()
		i -= size
		if _, err := m.EIP155Block.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.EIP150Hash) > 0 {
		i -= len(m.EIP150Hash)
		copy(dAtA[i:], m.EIP150Hash)
		i = encodeVarintEvm(dAtA, i, uint64(len(m.EIP150Hash)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.EIP150Block.Size()
		i -= size
		if _, err := m.EIP150Block.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.DAOForkSupport {
		i--
		if m.DAOForkSupport {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.DAOForkBlock.Size()
		i -= size
		if _, err := m.DAOForkBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.HomesteadBlock.Size()
		i -= size
		if _, err := m.HomesteadBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvm(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableCreate {
		n += 2
	}
	if m.EnableCall {
		n += 2
	}
	if len(m.ExtraEIPs) > 0 {
		l = 0
		for _, e := range m.ExtraEIPs {
			l += sovEvm(uint64(e))
		}
		n += 1 + sovEvm(uint64(l)) + l
	}
	if m.EnableContractDeploymentWhitelist {
		n += 2
	}
	if m.EnableContractBlockedList {
		n += 2
	}
	if m.MaxGasLimitPerTx != 0 {
		n += 1 + sovEvm(uint64(m.MaxGasLimitPerTx))
	}
	l = len(m.EvmDenom)
	if l > 0 {
		n += 1 + l + sovEvm(uint64(l))
	}
	return n
}

func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HomesteadBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.DAOForkBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	if m.DAOForkSupport {
		n += 2
	}
	l = m.EIP150Block.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = len(m.EIP150Hash)
	if l > 0 {
		n += 1 + l + sovEvm(uint64(l))
	}
	l = m.EIP155Block.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.EIP158Block.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.ByzantiumBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.ConstantinopleBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.PetersburgBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.IstanbulBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.MuirGlacierBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.YoloV2Block.Size()
	n += 1 + l + sovEvm(uint64(l))
	l = m.EWASMBlock.Size()
	n += 1 + l + sovEvm(uint64(l))
	return n
}

func sovEvm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvm(x uint64) (n int) {
	return sovEvm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCreate = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCall = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtraEIPs = append(m.ExtraEIPs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvm
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvm
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtraEIPs) == 0 {
					m.ExtraEIPs = make([]int, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtraEIPs = append(m.ExtraEIPs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraEIPs", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableContractDeploymentWhitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableContractDeploymentWhitelist = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableContractBlockedList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableContractBlockedList = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasLimitPerTx", wireType)
			}
			m.MaxGasLimitPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasLimitPerTx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomesteadBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HomesteadBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DAOForkBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DAOForkBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DAOForkSupport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DAOForkSupport = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP150Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EIP150Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP150Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EIP150Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP155Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EIP155Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP158Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EIP158Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByzantiumBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ByzantiumBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstantinopleBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConstantinopleBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetersburgBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PetersburgBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstanbulBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IstanbulBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuirGlacierBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MuirGlacierBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YoloV2Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.YoloV2Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EWASMBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EWASMBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvm = fmt.Errorf("proto: unexpected end of group")
)
